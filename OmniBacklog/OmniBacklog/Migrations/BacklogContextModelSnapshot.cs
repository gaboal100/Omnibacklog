// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OmniBacklog.DAL;

namespace OmniBacklog.Migrations
{
    [DbContext(typeof(BacklogContext))]
    partial class BacklogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OmniBacklog.MODEL.Autor", b =>
                {
                    b.Property<int>("AutorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("AutorId");

                    b.ToTable("Autores");

                    b.HasData(
                        new
                        {
                            AutorId = 1,
                            Nombre = "Sin asignar"
                        },
                        new
                        {
                            AutorId = 2,
                            Nombre = "J.K. Rowling"
                        },
                        new
                        {
                            AutorId = 3,
                            Nombre = "George R.R. Martin"
                        },
                        new
                        {
                            AutorId = 4,
                            Nombre = "Brandon Sanderson"
                        });
                });

            modelBuilder.Entity("OmniBacklog.MODEL.AutorLibro", b =>
                {
                    b.Property<int>("AutorId")
                        .HasColumnType("int");

                    b.Property<int>("LibroId")
                        .HasColumnType("int");

                    b.HasKey("AutorId", "LibroId");

                    b.HasIndex("LibroId");

                    b.ToTable("AutorLibros");
                });

            modelBuilder.Entity("OmniBacklog.MODEL.BibliotecaPersonal", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("LibroId")
                        .HasColumnType("int");

                    b.Property<bool>("Favorito")
                        .HasColumnType("bit");

                    b.Property<bool>("Leyendo")
                        .HasColumnType("bit");

                    b.HasKey("UsuarioId", "LibroId");

                    b.HasIndex("LibroId");

                    b.ToTable("BibliotecasPersonales");
                });

            modelBuilder.Entity("OmniBacklog.MODEL.Genero", b =>
                {
                    b.Property<int>("GeneroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("GeneroId");

                    b.ToTable("Generos");

                    b.HasData(
                        new
                        {
                            GeneroId = 1,
                            Nombre = "Sin asignar"
                        },
                        new
                        {
                            GeneroId = 2,
                            Nombre = "Fantasía medieval"
                        },
                        new
                        {
                            GeneroId = 3,
                            Nombre = "Ciencia ficción"
                        },
                        new
                        {
                            GeneroId = 4,
                            Nombre = "Ópera espacial"
                        },
                        new
                        {
                            GeneroId = 5,
                            Nombre = "Ficción histórica"
                        });
                });

            modelBuilder.Entity("OmniBacklog.MODEL.GeneroLibro", b =>
                {
                    b.Property<int>("LibroId")
                        .HasColumnType("int");

                    b.Property<int>("GeneroId")
                        .HasColumnType("int");

                    b.HasKey("LibroId", "GeneroId");

                    b.HasIndex("GeneroId");

                    b.ToTable("GenerosLibros");
                });

            modelBuilder.Entity("OmniBacklog.MODEL.Libro", b =>
                {
                    b.Property<int>("LibroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Numerado")
                        .HasColumnType("int");

                    b.Property<int?>("SagaId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("LibroId");

                    b.HasIndex("SagaId");

                    b.HasIndex("Titulo")
                        .IsUnique();

                    b.ToTable("Libros");

                    b.HasData(
                        new
                        {
                            LibroId = 1,
                            Numerado = 1,
                            SagaId = 3,
                            Titulo = "Harry Potter y la Piedra Filosofal"
                        },
                        new
                        {
                            LibroId = 2,
                            Numerado = 2,
                            SagaId = 3,
                            Titulo = "Harry Potter y la Cámara de los secretos"
                        },
                        new
                        {
                            LibroId = 3,
                            Numerado = 3,
                            SagaId = 3,
                            Titulo = "Harry Potter y el Prisionero de Azkaban"
                        },
                        new
                        {
                            LibroId = 4,
                            Numerado = 4,
                            SagaId = 3,
                            Titulo = "Harry Potter y el Cáliz de Fuego"
                        },
                        new
                        {
                            LibroId = 5,
                            Numerado = 5,
                            SagaId = 3,
                            Titulo = "Harry Potter y la Orden del Fénix"
                        },
                        new
                        {
                            LibroId = 6,
                            Numerado = 6,
                            SagaId = 3,
                            Titulo = "Harry Potter y el Príncipe Mestizo"
                        },
                        new
                        {
                            LibroId = 7,
                            Numerado = 7,
                            SagaId = 3,
                            Titulo = "Harry Potter y las Reliquias de la Muerte"
                        });
                });

            modelBuilder.Entity("OmniBacklog.MODEL.Saga", b =>
                {
                    b.Property<int>("SagaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Numerado")
                        .HasColumnType("int");

                    b.Property<int?>("Saga1Id")
                        .HasColumnType("int");

                    b.HasKey("SagaId");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.HasIndex("Saga1Id");

                    b.ToTable("Sagas");

                    b.HasData(
                        new
                        {
                            SagaId = 1,
                            Nombre = "Huérfanos",
                            Numerado = 0
                        },
                        new
                        {
                            SagaId = 2,
                            Nombre = "Únicos",
                            Numerado = 0
                        },
                        new
                        {
                            SagaId = 3,
                            Nombre = "Harry Potter",
                            Numerado = 0
                        });
                });

            modelBuilder.Entity("OmniBacklog.MODEL.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("UsuarioId");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            UsuarioId = 1,
                            Contraseña = "abc123.",
                            Nombre = "Usuario"
                        });
                });

            modelBuilder.Entity("OmniBacklog.MODEL.AutorLibro", b =>
                {
                    b.HasOne("OmniBacklog.MODEL.Autor", "Autor")
                        .WithMany("AutorLibros")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OmniBacklog.MODEL.Libro", "Libro")
                        .WithMany("AutorLibros")
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OmniBacklog.MODEL.BibliotecaPersonal", b =>
                {
                    b.HasOne("OmniBacklog.MODEL.Libro", "Libro")
                        .WithMany("BibliotecasPersonales")
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OmniBacklog.MODEL.Usuario", "Usuario")
                        .WithMany("BibliotecasPersonales")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OmniBacklog.MODEL.GeneroLibro", b =>
                {
                    b.HasOne("OmniBacklog.MODEL.Genero", "Genero")
                        .WithMany("GeneroLibros")
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OmniBacklog.MODEL.Libro", "Libro")
                        .WithMany("GeneroLibros")
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OmniBacklog.MODEL.Libro", b =>
                {
                    b.HasOne("OmniBacklog.MODEL.Saga", "Saga")
                        .WithMany("Libros")
                        .HasForeignKey("SagaId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("OmniBacklog.MODEL.Saga", b =>
                {
                    b.HasOne("OmniBacklog.MODEL.Saga", "Saga1")
                        .WithMany("Sagas")
                        .HasForeignKey("Saga1Id");
                });
#pragma warning restore 612, 618
        }
    }
}
